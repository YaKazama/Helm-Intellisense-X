{
  "HELM: Context": {
    "prefix": "helm:Context",
    "body": [
      ".Context",
    ],
    "description": "关键字: .Context"
  },
  "HELM: Values": {
    "prefix": "helm:Values",
    "body": [
      ".Values",
    ],
    "description": "关键字：.Values"
  },
  "HELM: Chart": {
    "prefix": "helm:Chart",
    "body": [
      ".Chart",
    ],
    "description": "关键字：.Chart"
  },
  "HELM: Chart.APIVersion": {
    "prefix": "helm:Chart.APIVersion",
    "body": [
      ".Chart.APIVersion",
    ],
    "description": "chart API 版本 （必需）"
  },
  "HELM: Chart.Name": {
    "prefix": "helm:Chart.Name",
    "body": [
      ".Chart.Name",
    ],
    "description": "chart名称 （必需）"
  },
  "HELM: Chart.Version": {
    "prefix": "helm:Chart.Version",
    "body": [
      ".Chart.Version",
    ],
    "description": "语义化2 版本 （必需）"
  },
  "HELM: Chart.KubeVersion": {
    "prefix": "helm:Chart.KubeVersion",
    "body": [
      ".Chart.KubeVersion",
    ],
    "description": "兼容Kubernetes版本的语义化版本 （可选）"
  },
  "HELM: Chart.Description": {
    "prefix": "helm:Chart.Description",
    "body": [
      ".Chart.Description",
    ],
    "description": "description一句话对这个项目的描述 （可选）"
  },
  "HELM: Chart.Type": {
    "prefix": "helm:Chart.Type",
    "body": [
      ".Chart.Type",
    ],
    "description": "chart类型 （可选）"
  },
  "HELM: Chart.Keywords": {
    "prefix": "helm:Chart.Keywords",
    "body": [
      ".Chart.Keywords",
    ],
    "description": "关于项目的一组关键字 （可选）"
  },
  "HELM: Chart.Home": {
    "prefix": "helm:Chart.Home",
    "body": [
      ".Chart.Home",
    ],
    "description": "项目home页面的URL （可选）"
  },
  "HELM: Chart.Dependencies": {
    "prefix": "helm:Chart.Dependencies",
    "body": [
      ".Chart.Dependencies",
    ],
    "description": "chart 必要条件列表 （可选）"
  },
  "HELM: Chart.Maintainers": {
    "prefix": "helm:Chart.Maintainers",
    "body": [
      ".Chart.Maintainers",
    ],
    "description": "维护者列表 （可选）"
  },
  "HELM: Chart.Icon": {
    "prefix": "helm:Chart.Icon",
    "body": [
      ".Chart.Icon",
    ],
    "description": "用做icon的SVG或PNG图片URL （可选）"
  },
  "HELM: Chart.AppVersion": {
    "prefix": "helm:Chart.AppVersion",
    "body": [
      ".Chart.AppVersion",
    ],
    "description": "包含的应用版本 （可选）。不需要是语义化，建议使用引号"
  },
  "HELM: Chart.Deprecated": {
    "prefix": "helm:Chart.Deprecated",
    "body": [
      ".Chart.Deprecated",
    ],
    "description": "不被推荐的chart （可选，布尔值）"
  },
  "HELM: Chart.Annotations": {
    "prefix": "helm:Chart.Annotations",
    "body": [
      ".Chart.Annotations",
    ],
    "description": "注释 （可选）"
  },
  "HELM: Release": {
    "prefix": "helm:Release",
    "body": [
      ".Release",
    ],
    "description": "Release 对象描述了版本发布本身"
  },
  "HELM: Release.Name": {
    "prefix": "helm:Release.Name",
    "body": [
      ".Release.Name",
    ],
    "description": "release名称。版本名称(非chart的)"
  },
  "HELM: Release.Namespace": {
    "prefix": "helm:Release.Namespace",
    "body": [
      ".Release.Namespace",
    ],
    "description": "发布的chart版本的命名空间。版本中包含的命名空间(如果manifest没有覆盖的话)"
  },
  "HELM: Release.IsUpgrade": {
    "prefix": "helm:Release.IsUpgrade",
    "body": [
      ".Release.IsUpgrade",
    ],
    "description": "如果当前操作是升级或回滚的话，该值将被设置为 true"
  },
  "HELM: Release.IsInstall": {
    "prefix": "helm:Release.IsInstall",
    "body": [
      ".Release.IsInstall",
    ],
    "description": "如果当前操作是安装的话，该值将被设置为 true"
  },
  "HELM: Release.Revision": {
    "prefix": "helm:Release.Revision",
    "body": [
      ".Release.Revision",
    ],
    "description": "此次修订的版本号。安装时是 1 ，每次升级或回滚都会自增"
  },
  "HELM: Release.Service": {
    "prefix": "helm:Release.Service",
    "body": [
      ".Release.Service",
    ],
    "description": "该service用来渲染当前模板。Helm 里始终 Helm"
  },
  "HELM: Files": {
    "prefix": "helm:Files",
    "body": [
      ".Files",
    ],
    "description": "在 chart 中提供访问所有的非特殊文件的对象。你不能使用它访问 Template 对象，只能访问其他文件"
  },
  "HELM: Files.Get": {
    "prefix": "helm:Files.Get",
    "body": [
      ".Files.Get",
    ],
    "description": "过文件名获取文件的方法"
  },
  "HELM: Files.GetBytes": {
    "prefix": "helm:Files.GetBytes",
    "body": [
      ".Files.GetBytes",
    ],
    "description": "用字节数组代替字符串获取文件内容的方法。 对图片之类的文件很有用"
  },
  "HELM: Files.Glob": {
    "prefix": "helm:Files.Glob",
    "body": [
      ".Files.Glob",
    ],
    "description": "用给定的 shell glob 模式匹配文件名返回文件列表的方法"
  },
  "HELM: Files.Lines": {
    "prefix": "helm:Files.Lines",
    "body": [
      ".Files.Lines",
    ],
    "description": "逐行读取文件内容的方法。迭代文件中每一行时很有用"
  },
  "HELM: Files.AsSecrets": {
    "prefix": "helm:Files.AsSecrets",
    "body": [
      ".Files.AsSecrets",
    ],
    "description": "使用 Base 64 编码字符串返回文件体的方法"
  },
  "HELM: Files.AsConfig": {
    "prefix": "helm:Files.AsConfig",
    "body": [
      ".Files.AsConfig",
    ],
    "description": "使用 YAML 格式返回文件体的方法"
  },
  "HELM: Capabilities": {
    "prefix": "helm:Capabilities",
    "body": [
      ".Capabilities",
    ],
    "description": "提供关于 Kubernetes 集群支持功能的信息"
  },
  "HELM: Capabilities.APIVersions": {
    "prefix": "helm:Capabilities.APIVersions",
    "body": [
      ".Capabilities.APIVersions",
    ],
    "description": "是一个版本列表"
  },
  "HELM: Capabilities.APIVersions.Has": {
    "prefix": "helm:Capabilities.APIVersions.Has",
    "body": [
      ".Capabilities.APIVersions.Has \"${1:resource}\"$0",
    ],
    "description": "说明集群中的版本 (比如, batch/v1) 或是资源 (比如, apps/v1/Deployment) 是否可用"
  },
  "HELM: Capabilities.KubeVersion": {
    "prefix": "helm:Capabilities.KubeVersion",
    "body": [
      ".Capabilities.KubeVersion",
    ],
    "description": "Kubernetes 的版本号"
  },
  "HELM: Capabilities.KubeVersion.Version": {
    "prefix": "helm:Capabilities.KubeVersion.Version",
    "body": [
      ".Capabilities.KubeVersion.Version",
    ],
    "description": "Kubernetes 的版本号"
  },
  "HELM: Capabilities.KubeVersion.Major": {
    "prefix": "helm:Capabilities.KubeVersion.Major",
    "body": [
      ".Capabilities.KubeVersion.Major",
    ],
    "description": "Kubernetes 的主版本"
  },
  "HELM: Capabilities.KubeVersion.Minor": {
    "prefix": "helm:Capabilities.KubeVersion.Minor",
    "body": [
      ".Capabilities.KubeVersion.Minor",
    ],
    "description": "Kubernetes 的次版本"
  },
  "HELM: Capabilities.HelmVersion": {
    "prefix": "helm:Capabilities.HelmVersion",
    "body": [
      ".Capabilities.HelmVersion",
    ],
    "description": "包含 Helm 版本详细信息的对象，和 helm version 的输出一致"
  },
  "HELM: Capabilities.HelmVersion.Version": {
    "prefix": "helm:Capabilities.HelmVersion.Version",
    "body": [
      ".Capabilities.HelmVersion.Version",
    ],
    "description": "是当前 Helm 语义格式的版本"
  },
  "HELM: Capabilities.HelmVersion.GitCommit": {
    "prefix": "helm:Capabilities.HelmVersion.GitCommit",
    "body": [
      ".Capabilities.HelmVersion.GitCommit",
    ],
    "description": "Helm 的 git sha1 值"
  },
  "HELM: Capabilities.HelmVersion.GitTreeState": {
    "prefix": "helm:Capabilities.HelmVersion.GitTreeState",
    "body": [
      ".Capabilities.HelmVersion.GitTreeState",
    ],
    "description": "是 Helm git 树的状态"
  },
  "HELM: Capabilities.HelmVersion.GoVersion": {
    "prefix": "helm:Capabilities.HelmVersion.GoVersion",
    "body": [
      ".Capabilities.HelmVersion.GoVersion",
    ],
    "description": "是使用的 Go 编译器版本"
  },
  "HELM: Template": {
    "prefix": "helm:Template",
    "body": [
      ".Template",
    ],
    "description": "包含当前被执行的当前模板信息"
  },
  "HELM: Template.Name": {
    "prefix": "helm:Template.Name",
    "body": [
      ".Template.Name",
    ],
    "description": "当前模板的命名空间文件路径 (e.g. mychart/templates/mytemplate.yaml)"
  },
  "HELM: Template.BasePath": {
    "prefix": "helm:Template.BasePath",
    "body": [
      ".Template.BasePath",
    ],
    "description": "当前 chart 模板目录的路径 (e.g. mychart/templates)"
  },
  // braces
  "HELM: if:braces": {
    "prefix": "helm:braces:if",
    "body": [
      "{{- if $1 }}",
      "  $2",
      "{{- end }}$0"
    ],
    "description": "创建条件语句: if ... end"
  },
  "HELM: if-else:braces": {
    "prefix": "helm:braces:if-else",
    "body": [
      "{{- if $1 }}",
      "  $2",
      "{{- else }}",
      "  $3",
      "{{- end }}$0"
    ],
    "description": "创建条件语句: if ... else ... end"
  },
  "HELM: else:braces": {
    "prefix": "helm:braces:else",
    "body": [
      "{{- else }}",
      "  $0"
    ],
    "description": "创建条件语句: else"
  },
  "HELM: else-if:braces": {
    "prefix": "helm:braces:else-if",
    "body": [
      "{{- else if $1 }}",
      "  $0",
    ],
    "description": "创建条件语句: else if"
  },
  "HELM: with:braces": {
    "prefix": "helm:braces:with",
    "body": [
      "{{- with ${1:.} }}",
      "  $2",
      "{{- end }}$0"
    ],
    "description": "用来指定范围"
  },
  "HELM: braces:range:dict": {
    "prefix": "helm:braces:range:dict",
    "body": [
      "{{- range $1 := $2 }}",
      "  $3",
      "{{- end }}$0"
    ],
    "description": "为 Map 提供 \"for each\" 类型的循环"
  },
  "HELM: braces:range:list:slice": {
    "prefix": "helm:braces:range:list:slice",
    "body": [
      "{{- range $1 }}",
      "  $3",
      "{{- end }}$0"
    ],
    "description": "为 Slice 提供 \"for each\" 类型的循环"
  },
  "HELM: braces:noHyphen": {
    "prefix": "helm:braces:print",
    "body": [
      "{{ $1 }}$0",
    ],
    "description": "{{ variable }}"
  },
  "HELM: braces:leftHyphen": {
    "prefix": "helm:braces:leftHyphen",
    "body": [
      "{{- $2 }}$0",
    ],
    "description": "HELM: {{- .Arg }}"
  },
  "HELM: tab:braces": {
    "prefix": "helm:braces:tab",
    "body": [
      "{{- indent ${1:0} \"\" -}}$0",
    ],
    "description": "代码块 缩进 (不换行): {{- indent 0 \"\" -}}"
  },
  "HELM: tabn:braces": {
    "prefix": "helm:braces:tabn",
    "body": [
      "{{- nindent ${1:0} \"\" -}}$0",
    ],
    "description": "代码块 缩进 (换行): {{- nindent 0 \"\" -}}"
  },
  "HELM: var:braces": {
    "prefix": "helm:braces:var",
    "body": [
      "{{- $1 := $2 }}$0",
    ],
    "description": "代码块 定义变量: {{- var := value }}"
  },
  "HELM: var:braces:k": {
    "prefix": "helm:braces:varDollar",
    "body": [
      "{{- \\$__$1 := $2 }}$0",
    ],
    "description": "代码块 定义变量: {{- var := value }}"
  },
  "HELM: braces:set": {
    "prefix": "helm:braces:set",
    "body": [
      "{{- \\$_ := set ${1:.} \"${2:key}\" ${3:value} }}$0",
    ],
    "description": "代码块 给字典添加一个键值对: {{- $_ := set dict \"key\" \"value\" ... }}"
  },
  "HELM: braces:unset": {
    "prefix": "helm:braces:unset",
    "body": [
      "{{- \\$_ := unset ${1:.} \"${2:key}\" }}$0",
    ],
    "description": "代码块 给定一个映射和 key ,从映射中删除这个 key: {{- $_ := unset dict \"key\" }}"
  },
  "HELM: assignment:braces": {
    "prefix": "helm:braces:assignment",
    "body": [
      "{{- $1 = $2 }}$0",
    ],
    "description": "代码块 变量赋值: {{- var = value }}"
  },
  "HELM: define:braces": {
    "prefix": "helm:braces:define",
    "body": [
      "{{- define \"$1\" -}}",
      "  $2",
      "{{- end }}$0"
    ],
    "description": "在模板中声明一个新的命名模板"
  },
  "HELM: include:braces": {
    "prefix": "helm:braces:include",
    "body": [
      "{{- include \"$1\" $2 }}$0",
    ],
    "description": "引用命名模板"
  },
  "HELM: notation:braces": {
    "prefix": "helm:braces:notation",
    "body": [
      "{{- /*",
      "  $1",
      "*/ -}}$0"
    ],
    "description": "块注释"
  },
  "HELM: notation:oneline:braces": {
    "prefix": "helm:braces:notationOneLine",
    "body": [
      "{{- /*  $1 */ -}}$0"
    ],
    "description": "块注释"
  },
  "HELM: end": {
    "prefix": "helm:braces:end",
    "body": [
      "{{- end }}$0",
    ],
    "description": "代码块 end: {{- end }}"
  },
  "HELM: fail:braces": {
    "prefix": "helm:braces:fail",
    "body": [
      "{{- fail \"$1\" }}$0",
    ],
    "description": "代码块 fail: {{- fail \"<string>\" }}"
  },
  "HELM: and": {
    "prefix": "helm:logic:and",
    "body": [
      "and ${1:valueN} $0"
    ],
    "description": "返回两个参数的 and 布尔值"
  },
  "HELM: or": {
    "prefix": "helm:logic:or",
    "body": [
      "or ${1:valueN} $0"
    ],
    "description": "返回两个参数的 or 布尔值。会返回第一个非空参数或最后一个参数"
  },
  "HELM: not": {
    "prefix": "helm:logic:not",
    "body": [
      "not $0"
    ],
    "description": "返回参数的布尔求反"
  },
  "HELM: eq": {
    "prefix": "helm:logic:eq",
    "body": [
      "eq ${1:value1} ${2:value2}$0"
    ],
    "description": "返回参数的布尔等式 (比如， Arg1 == Arg2)"
  },
  "HELM: ne": {
    "prefix": "helm:logic:ne",
    "body": [
      "ne ${1:value1} ${2:value2}$0"
    ],
    "description": "返回参数的布尔非等式 (比如， Arg1 != Arg2)"
  },
  "HELM: lt": {
    "prefix": "helm:logic:lt",
    "body": [
      "lt ${1:value1} ${2:value2}$0"
    ],
    "description": "如果第一参数小于第二参数，返回布尔真。否则返回假 (比如， Arg1 < Arg2)"
  },
  "HELM: le": {
    "prefix": "helm:logic:le",
    "body": [
      "le ${1:value1} ${2:value2}$0"
    ],
    "description": "如果第一参数小于等于第二参数，返回布尔真，否则返回假 (比如， Arg1 <= Arg2)"
  },
  "HELM: gt": {
    "prefix": "helm:logic:gt",
    "body": [
      "gt ${1:value1} ${2:value2}$0"
    ],
    "description": "如果第一参数大于第二参数，返回布尔真，否则返回假 (比如， Arg1 > Arg2)"
  },
  "HELM: ge": {
    "prefix": "helm:logic:ge",
    "body": [
      "ge ${1:value1} ${2:value2}$0"
    ],
    "description": "如果第一参数大于等于第二参数，返回布尔真，否则返回假。(比如， Arg1 >= Arg2)"
  },
  "HELM: defalut": {
    "prefix": "helm:logic:default",
    "body": [
      "default \"${2:defaultValue}\" ${1:value}$0"
    ],
    "description": "使用 default 设置一个简单的默认值"
  },
  "HELM: empty": {
    "prefix": "helm:logic:empty",
    "body": [
      "empty ${1:value}$0",
    ],
    "description": "如果给定的值被认为是空的，则 empty 函数返回true ，否则返回 false"
  },
  "HELM: fail": {
    "prefix": "helm:logic:fail",
    "body": [
      "fail \"$1\"$0",
    ],
    "description": "无条件地返回带有指定文本的空 string 或者 error 。这在其他条件已经确定而模板渲染应该失败的情况下很有用"
  },
  "HELM: coalesce": {
    "prefix": "helm:logic:coalesce",
    "body": [
      "coalesce ${1:valueN}$0",
    ],
    "description": "coalesce 函数获取一个列表并返回第一个非空值"
  },
  "HELM: ternary": {
    "prefix": "helm:logic:ternary",
    "body": [
      "ternary ${2:trueValue} ${3:falseValue} ${1:testValue}$0",
    ],
    "description": "ternary 函数获取两个值和一个 test 值。如果test 值是 true ，则返回第一个值。如果 test 值是空，则返回第二个值。 这和C或其他编程语言中的的ternary运算符类似"
  },
  "HELM: print": {
    "prefix": "helm:str:print",
    "body": [
      "print ${1:valueN}$0",
    ],
    "description": "返回各部分组合的字符串。如果可能，非字符串类型会被转换成字符串"
  },
  "HELM: println": {
    "prefix": "helm:str:println",
    "body": [
      "println ${1:valueN}$0",
    ],
    "description": "返回各部分组合的字符串。如果可能，非字符串类型会被转换成字符串。会在末尾新添加一行"
  },
  "HELM: printf": {
    "prefix": "helm:str:printf",
    "body": [
      "printf \"${1:formatString}\" ${2:valueN}$0",
    ],
    "description": "返回参数按顺序传递的格式化字符串"
  },
  "HELM: trim": {
    "prefix": "helm:str:trim",
    "body": [
      "trim ${1:value}$0",
    ],
    "description": "trim 行数移除字符串两边的空格"
  },
  "HELM: trimAll": {
    "prefix": "helm:str:trimAll",
    "body": [
      "trimAll \"${2:trimString}\" ${1:value}$0",
    ],
    "description": "从字符串中移除给定的字符"
  },
  "HELM: trimPrefix": {
    "prefix": "helm:str:trimPrefix",
    "body": [
      "trimPrefix \"${2:trimString}\" ${1:value}$0",
    ],
    "description": "从字符串中移除前缀"
  },
  "HELM: trimSuffix": {
    "prefix": "helm:str:trimSuffix",
    "body": [
      "trimSuffix \"${2:trimString}\" ${1:value}$0",
    ],
    "description": "从字符串中移除后缀"
  },
  "HELM: lower": {
    "prefix": "helm:str:lower",
    "body": [
      "lower ${1:value}$0",
    ],
    "description": "将整个字符串转换成小写"
  },
  "HELM: upper": {
    "prefix": "helm:str:upper",
    "body": [
      "upper ${1:value}$0",
    ],
    "description": "将整个字符串转换成大写"
  },
  "HELM: title": {
    "prefix": "helm:str:title",
    "body": [
      "title ${1:value}$0",
    ],
    "description": "首字母转换成大写"
  },
  "HELM: untitle": {
    "prefix": "helm:str:untitle",
    "body": [
      "untitle ${1:value}$0",
    ],
    "description": "移除首字母大写"
  },
  "HELM: repeat": {
    "prefix": "helm:str:repeat",
    "body": [
      "repeat ${2:int} ${1:value}$0",
    ],
    "description": "重复字符串多次"
  },
  "HELM: substr": {
    "prefix": "helm:str:substr",
    "body": [
      "substr ${2:intStart} ${3:intEnd} ${1:value}$0",
    ],
    "description": "获取字符串的子串"
  },
  "HELM: nospace": {
    "prefix": "helm:str:nospace",
    "body": [
      "nospace ${1:value}$0",
    ],
    "description": "去掉字符串中的所有空格"
  },
  "HELM: trunc": {
    "prefix": "helm:str:trunc",
    "body": [
      "trunc ${2:intStart} ${1:value}$0",
    ],
    "description": "截断字符串"
  },
  "HELM: abbrev": {
    "prefix": "helm:str:abbrev",
    "body": [
      "abbrev ${2:maxLength} ${1:value}$0",
    ],
    "description": "用省略号截断字符串 (...)"
  },
  "HELM: abbrevboth": {
    "prefix": "helm:str:abbrevboth",
    "body": [
      "abbrevboth ${2:intOffset} ${3:maxLength} ${1:value}$0",
    ],
    "description": "两边都省略。三个参数分别为：左侧偏移值，最大长度，字符串"
  },
  "HELM: initials": {
    "prefix": "helm:str:initials",
    "body": [
      "initials ${1:value}$0",
    ],
    "description": "截取给定字符串每个单词的首字母，并组合在一起"
  },
  "HELM: randAlphaNum": {
    "prefix": "helm:str:randAlphaNum",
    "body": [
      "randAlphaNum ${1:intLegnth}$0",
    ],
    "description": "生成加密安全的(使用 crypto/rand)的随机字符串。字符集合：\"0-9a-zA-Z\""
  },
  "HELM: randAlpha": {
    "prefix": "helm:str:randAlpha",
    "body": [
      "randAlpha ${1:intLegnth}$0",
    ],
    "description": "生成加密安全的(使用 crypto/rand)的随机字符串。字符集合：\"a-zA-Z\""
  },
  "HELM: randNumeric": {
    "prefix": "helm:str:randNumeric",
    "body": [
      "randNumeric ${1:intLegnth}$0",
    ],
    "description": "生成加密安全的(使用 crypto/rand)的随机字符串。字符集合：\"0-9\""
  },
  "HELM: randAscii": {
    "prefix": "helm:str:randAscii",
    "body": [
      "randAscii ${1:intLegnth}$0",
    ],
    "description": "生成加密安全的(使用 crypto/rand)的随机字符串。字符集合：所有的可打印 ASCII 字符"
  },
  "HELM: wrap": {
    "prefix": "helm:str:wrap",
    "body": [
      "wrap ${2:80} ${1:value}$0",
    ],
    "description": "以给定列数给文字换行"
  },
  "HELM: wrapWith": {
    "prefix": "helm:str:wrapWith",
    "body": [
      "wrapWith ${2:int} \"${3:EOL}\" ${1:value}$0",
    ],
    "description": "wrapWith 和 wrap 类似，但可以以指定字符串换行。(wrap 使用的是 \\n)"
  },
  "HELM: contains": {
    "prefix": "helm:str:contains",
    "body": [
      "contains \"${2:string}\" ${1:value}$0",
    ],
    "description": "测试字符串是否包含在另一个字符串中"
  },
  "HELM: hasPrefix": {
    "prefix": "helm:str:hasPrefix",
    "body": [
      "hasPrefix \"${1:string}\" ${1:value}$0",
    ],
    "description": "测试字符串是否有给定的前缀"
  },
  "HELM: hasSuffix": {
    "prefix": "helm:str:hasSuffix",
    "body": [
      "hasSuffix \"${1:string}\" ${1:value}$0",
    ],
    "description": "测试字符串是否有给定的后缀"
  },
  "HELM: quote": {
    "prefix": "helm:str:quote",
    "body": [
      "quote ${1:value}$0",
    ],
    "description": "该函数将字符串用双引号 (quote) 括起来"
  },
  "HELM: squote": {
    "prefix": "helm:str:squote",
    "body": [
      "squote ${1:value}$0",
    ],
    "description": "该函数将字符串用单引号 (squote) 括起来"
  },
  "HELM: cat": {
    "prefix": "helm:str:cat",
    "body": [
      "cat ${1:valueN}$0",
    ],
    "description": "cat 函数将多个字符串合并成一个，用空格分隔"
  },
  "HELM: indent": {
    "prefix": "helm:str:indent",
    "body": [
      "indent ${2:0} ${1:value}$0",
    ],
    "description": "indent 以指定长度缩进给定字符串所在行，在对齐多行字符串时很有用"
  },
  "HELM: nindent": {
    "prefix": "helm:str:nindent",
    "body": [
      "nindent ${2:0} ${1:value}$0",
    ],
    "description": "nindent 函数和 indent 函数一样，但可以在字符串开头添加新行"
  },
  "HELM: replace": {
    "prefix": "helm:str:replace",
    "body": [
      "replace \"${2: }\" \"$3\" ${1:value}$0",
    ],
    "description": "执行简单的字符串替换"
  },
  "HELM: plural": {
    "prefix": "helm:str:plural",
    "body": [
      "plural ${1:singular} ${2:plural} ${3:length}$0",
    ],
    "description": "字符串复数化"
  },
  "HELM: snakecase": {
    "prefix": "helm:str:snakecase",
    "body": [
      "snakecase ${1:value}$0",
    ],
    "description": "将驼峰写法转换成蛇形写法"
  },
  "HELM: camelcase": {
    "prefix": "helm:str:camelcase",
    "body": [
      "camelcase ${1:value}$0",
    ],
    "description": "将字符串从蛇形写法转换成驼峰写法"
  },
  "HELM: kebabcase": {
    "prefix": "helm:str:kebabcase",
    "body": [
      "kebabcase ${1:value}$0",
    ],
    "description": "将驼峰写法转换成烤串写法"
  },
  "HELM: swapcase": {
    "prefix": "helm:str:swapcase",
    "body": [
      "swapcase ${1:value}$0",
    ],
    "description": "基于单词的算法切换字符串的大小写"
  },
  "HELM: shuffle": {
    "prefix": "helm:str:shuffle",
    "body": [
      "shuffle ${1:value}$0",
    ],
    "description": "对字符串进行洗牌"
  },
  "HELM: atoi": {
    "prefix": "helm:type:atoi",
    "body": [
      "atoi ${1:value} $0",
    ],
    "description": "字符串转换成整型"
  },
  "HELM: float64": {
    "prefix": "helm:type:float64",
    "body": [
      "float64 ${1:value}$0",
    ],
    "description": "转换成 float64"
  },
  "HELM: int": {
    "prefix": "helm:type:int",
    "body": [
      "int ${1:value}$0",
    ],
    "description": "按系统整型宽度转换成 int"
  },
  "HELM: int64": {
    "prefix": "helm:type:int64",
    "body": [
      "int64 ${1:value}$0",
    ],
    "description": "转换成 int64"
  },
  "HELM: toDecimal": {
    "prefix": "helm:type:toDecimal",
    "body": [
      "toDecimal ${1:value}$0",
    ],
    "description": "将 unix 八进制转换成 int64 。给定一个 unix 八进制权限，转换成十进制"
  },
  "HELM: toString": {
    "prefix": "helm:type:toString",
    "body": [
      "toString ${1:value}$0",
    ],
    "description": "转换成字符串"
  },
  "HELM: toStrings": {
    "prefix": "helm:type:toStrings",
    "body": [
      "toStrings ${1:value}$0",
    ],
    "description": "将列表、切片或数组转换成字符串列表。给定一个类列表集合，输出字符串切片"
  },
  "HELM: toJson": {
    "prefix": "helm:type:toJson",
    "body": [
      "toJson ${1:value}$0",
    ],
    "description": "HELM: 将列表、切片、数组、字典或对象转换成JSON"
  },
  "HELM: mustToJson": {
    "prefix": "helm:type:mustToJson",
    "body": [
      "mustToJson ${1:value}$0",
    ],
    "description": "将列表、切片、数组、字典或对象转换成 JSON"
  },
  "HELM: toPrettyJson": {
    "prefix": "helm:type:toPrettyJson",
    "body": [
      "toPrettyJson ${1:value}$0",
    ],
    "description": "将列表、切片、数组、字典或对象转换成格式化 JSON"
  },
  "HELM: mustToPrettyJson": {
    "prefix": "helm:type:mustToPrettyJson",
    "body": [
      "mustToPrettyJson ${1:value}$0",
    ],
    "description": "将列表、切片、数组、字典或对象转换成格式化 JSON"
  },
  "HELM: toRawJson": {
    "prefix": "helm:type:toRawJson",
    "body": [
      "toRawJson ${1:value}$0",
    ],
    "description": "将列表、切片、数组、字典或对象转换成HTML字符未转义的 JSON"
  },
  "HELM: mustToRawJson": {
    "prefix": "helm:type:mustToRawJson",
    "body": [
      "mustToRawJson ${1:value}$0",
    ],
    "description": "将列表、切片、数组、字典或对象转换成 HTML 字符未转义的 JSON"
  },
  "HELM: fromYaml": {
    "prefix": "helm:type:fromYaml",
    "body": [
      "fromYaml ${1:value}$0",
    ],
    "description": " 将 YAML 字符串转化成对象。fromYaml 函数将 YAML 字符串转换成模板可用的对象"
  },
  "HELM: fromJson": {
    "prefix": "helm:type:fromJson",
    "body": [
      "fromJson ${1:value}$0",
    ],
    "description": "将 JSON 字符串转化成对象。fromJson 函数将 JSON 字符串转换成模板可用的对象"
  },
  "HELM: toYaml": {
    "prefix": "helm:type:toYaml",
    "body": [
      "toYaml ${1:value}$0",
    ],
    "description": "将列表、切片、数组、字典或对象转换成已缩进的 yaml, 可以从任意源拷贝 yaml 块"
  },
  "HELM: regexMatch": {
    "prefix": "helm:regex:regexMatch",
    "body": [
      "regexMatch ${2:regex} ${1:value}$0",
    ],
    "description": "如果输入字符串包含可匹配正则表达式任意字符串，则返回 true"
  },
  "HELM: mustRegexMatch": {
    "prefix": "helm:regex:mustRegexMatch",
    "body": [
      "mustRegexMatch ${2:regex} ${1:value}$0",
    ],
    "description": "如果输入字符串包含可匹配正则表达式任意字符串，则返回 true"
  },
  "HELM: regexFindAll": {
    "prefix": "helm:regex:regexFindAll",
    "body": [
      "regexFindAll ${2:regex} ${1:value} ${3:-1}$0",
    ],
    "description": "返回输入字符串匹配正则表达式的所有切片。最后一个参数表示要返回的子字符串的数量，-1表示返回所有"
  },
  "HELM: mustRegexFindAll": {
    "prefix": "helm:regex:mustRegexFindAll",
    "body": [
      "mustRegexFindAll ${2:regex} ${1:value} ${3:-1}$0",
    ],
    "description": "返回输入字符串匹配正则表达式的所有切片。最后一个参数表示要返回的子字符串的数量，-1表示返回所有"
  },
  "HELM: regexFind": {
    "prefix": "helm:regex:regexFind",
    "body": [
      "regexFind ${2:regex} ${1:value}$0",
    ],
    "description": "返回输入字符串的第一个 (最左边的) 正则匹配"
  },
  "HELM: mustRegexFind": {
    "prefix": "helm:regex:mustRegexFind",
    "body": [
      "mustRegexFind ${2:regex} ${1:value}$0",
    ],
    "description": "返回输入字符串的第一个 (最左边的) 正则匹配"
  },
  "HELM: regexReplaceAll": {
    "prefix": "helm:regex:regexReplaceAll",
    "body": [
      "regexReplaceAll ${2:regex} ${1:value} ${3:replaceString}$0",
    ],
    "description": "返回输入字符串的拷贝，用替换字符串替换 Regexp 的匹配项。在替换字符串里面， $ 标志被解释为扩展，因此对于实例来说 $1 表示第一个子匹配的文本"
  },
  "HELM: mustRegexReplaceAll": {
    "prefix": "helm:regex:mustRegexReplaceAll",
    "body": [
      "mustRegexReplaceAll ${2:regex} ${1:value} ${3:replaceString}$0",
    ],
    "description": "返回输入字符串的拷贝，用替换字符串替换 Regexp 的匹配项。在替换字符串里面， $ 标志被解释为扩展，因此对于实例来说 $1 表示第一个子匹配的文本"
  },
  "HELM: regexReplaceAllLiteral": {
    "prefix": "helm:regex:regexReplaceAllLiteral",
    "body": [
      "regexReplaceAllLiteral ${2:regex} ${1:value} ${3:replaceString}$0",
    ],
    "description": "返回输入字符串的拷贝，用替换字符串替换 Regexp 的匹配项。匹配字符串直接替换而不是扩展"
  },
  "HELM: mustRegexReplaceAllLiteral": {
    "prefix": "helm:regex:mustRegexReplaceAllLiteral",
    "body": [
      "mustRegexReplaceAllLiteral ${2:regex} ${1:value} ${3:replaceString}$0",
    ],
    "description": "返回输入字符串的拷贝，用替换字符串替换 Regexp 的匹配项。匹配字符串直接替换而不是扩展"
  },
  "HELM: regexSplit": {
    "prefix": "helm:regex:regexSplit",
    "body": [
      "regexSplit ${2:regex} ${1:value} ${3:-1}$0",
    ],
    "description": "HELM: regexSplit \"z+\" \"pizza\" -1 => [pi a]"
  },
  "HELM: mustRegexSplit": {
    "prefix": "helm:regex:mustRegexSplit",
    "body": [
      "mustRegexSplit ${2:regex} ${1:value} ${3:-1}$0",
    ],
    "description": "将输入字符串切成有表达式分隔的子字符串，并返回表达式匹配项之间的切片。最后一个参数 n 确定要返回的子字符串数量，-1表示返回所有匹配"
  },
  "HELM: sha1sum": {
    "prefix": "helm:crypto:sha1sum",
    "body": [
      "sha1sum ${1:value}$0",
    ],
    "description": "sha1sum 函数接收一个字符串，并计算它的 SHA1 摘要"
  },
  "HELM: sha256sum": {
    "prefix": "helm:crypto:sha256sum",
    "body": [
      "sha256sum ${1:value}$0",
    ],
    "description": "sha256sum 函数接收一个字符串，并计算它的 SHA256 摘要"
  },
  "HELM: adler32sum": {
    "prefix": "helm:crypto:adler32sum",
    "body": [
      "adler32sum ${1:value}$0",
    ],
    "description": "adler32sum 函数接收一个字符串，并计算它的 Adler-32 校验和"
  },
  "HELM: htpasswd": {
    "prefix": "helm:crypto:htpasswd",
    "body": [
      "htpasswd ${1:username} ${2:password}$0",
    ],
    "description": "htpasswd 函数使用 username 和 password 生成一个密码的 bcrypt 哈希值。该结果可用于 Apache HTTP Server 的基础认证"
  },
  "HELM: derivePassword": {
    "prefix": "helm:crypto:derivePassword",
    "body": [
      "derivePassword ${1:valueN}$0",
    ],
    "description": "derivePassword 函数可用于基于某些共享的“主密码”约束得到特定密码"
  },
  "HELM: genPrivateKey": {
    "prefix": "helm:crypto:genPrivateKey",
    "body": [
      "genPrivateKey ${1:ecdsa|dsa|rsa}$0",
    ],
    "description": "genPrivateKey 函数生成一个编码成PEM块的新私钥。key 可用值为 ecdsa dsa rsa"
  },
  "HELM: buildCustomCert": {
    "prefix": "helm:crypto:buildCustomCert",
    "body": [
      "buildCustomCert ${1:cert} ${2:key}$0",
    ],
    "description": "buildCustomCert 函数允许自定义证书。base64 编码"
  },
  "HELM: genCA": {
    "prefix": "helm:crypto:genCA",
    "body": [
      "genCA ${1:CN} ${2:days}$0",
    ],
    "description": "genCA 函数生成一个新的，自签名的 x509 证书机构"
  },
  "HELM: genSelfSignedCert": {
    "prefix": "helm:crypto:genSelfSignedCert",
    "body": [
      "genSelfSignedCert ${1:CN} ${2:ipList} ${3:DNSList} ${4:days}$0",
    ],
    "description": "genSelfSignedCert 函数生成一个新的，自签名的 x509 证书"
  },
  "HELM: genSignedCert": {
    "prefix": "helm:crypto:genSignedCert",
    "body": [
      "genSignedCert ${1:CN} ${2:ipList} ${3:DNSList} ${4:days} ${5:CA}$0",
    ],
    "description": "genSignedCert 通过指定的 CA 签名生成一个新的， x509 证书"
  },
  "HELM: encryptAES": {
    "prefix": "helm:crypto:encryptAES",
    "body": [
      "encryptAES ${1:secretkey} ${2:plaintext}$0",
    ],
    "description": "encryptAES 函数使用 AES-256 CBC 加密文本并返回一个 base64 编码字符串"
  },
  "HELM: decryptAES": {
    "prefix": "helm:crypto:decryptAES",
    "body": [
      "decryptAES ${1:AES-256 CBC} ${2:secretkey}$0",
    ],
    "description": "decryptAES 函数接收一个 AES-256 CBC 编码的字符串并返回解密文本"
  },
  "HELM: now": {
    "prefix": "helm:date:now",
    "body": [
      "now$0",
    ],
    "description": "当前日期/时间。和其他日期函数一起使用"
  },
  "HELM: ago": {
    "prefix": "helm:date:ago",
    "body": [
      "ago .CreatedAt$0",
    ],
    "description": "ago 函数返回距 time.Now 的以秒为单位的间隔时间"
  },
  "HELM: date": {
    "prefix": "helm:date:date",
    "body": [
      "date \"2006-01-02\"$0",
    ],
    "description": "date函数格式化日期。日期格式化为 YEAR-MONTH-DAY"
  },
  "HELM: dateInZone": {
    "prefix": "helm:date:dateInZone",
    "body": [
      "dateInZone \"2006-01-02\" (now) \"${1:UTC}\" $0",
    ],
    "description": "和 date 一样，但是和时区一起"
  },
  "HELM: duration": {
    "prefix": "helm:date:duration",
    "body": [
      "duration ${1:seconds}$0",
    ],
    "description": "将给定的秒数格式化为 time.Duration"
  },
  "HELM: durationRound": {
    "prefix": "helm:date:durationRound",
    "body": [
      "durationRound ${1:time.Duration}$0",
    ],
    "description": "将给定时间舍入到最重要的单位。当 time.Time 计算为一个自某个时刻以来的时间，字符串和 time.Duration 被解析为一个时间段"
  },
  "HELM: unixEpoch": {
    "prefix": "helm:date:unixEpoch",
    "body": [
      "unixEpoch$0",
    ],
    "description": "返回 time.Time 的 unix 时间戳"
  },
  "HELM: dateModify": {
    "prefix": "helm:date:dateModify",
    "body": [
      "dateModify ${1:time}$0",
    ],
    "description": "dateModify 给定一个修改日期并返回时间戳"
  },
  "HELM: mustDateModify": {
    "prefix": "helm:date:mustDateModify",
    "body": [
      "mustDateModify ${1:time}$0",
    ],
    "description": "dateModify 给定一个修改日期并返回时间戳"
  },
  "HELM: htmlDate": {
    "prefix": "helm:date:htmlDate",
    "body": [
      "htmlDate$0",
    ],
    "description": "htmlDate 函数用于格式化插入到 HTML 日期选择器输入字段的日期"
  },
  "HELM: htmlDateInZone": {
    "prefix": "helm:date:htmlDateInZone",
    "body": [
      "htmlDateInZone (now) \"${1:UTC}\"$0",
    ],
    "description": "和 htmlDate 一样，但多了个时区"
  },
  "HELM: toDate": {
    "prefix": "helm:date:toDate",
    "body": [
      "toDate \"2006-01-02\" \"${1:yyyy-mm-dd}\"$0",
    ],
    "description": "toDate 将字符串转换成日期。第一个参数是日期格式，第二个参数是日期字符串。 如果字符串无法转换就会返回 0 值。mustToDate 以防无法转换会返回错误"
  },
  "HELM: mustToDate": {
    "prefix": "helm:date:mustToDate",
    "body": [
      "mustToDate \"2006-01-02\" \"${1:yyyy-mm-dd}\"$0",
    ],
    "description": "mustToDate 将字符串转换成日期。第一个参数是日期格式，第二个参数是日期字符串。 如果字符串无法转换就会返回 0 值。mustToDate 以防无法转换会返回错误"
  },
  "HELM: dict": {
    "prefix": "helm:dict",
    "body": [
      "dict ${1:keyN} ${2:valueN}$0",
    ],
    "description": "通过调用 dict 函数并传递一个键值对列表创建字典。key 和 value 需要成对出现"
  },
  "HELM: get": {
    "prefix": "helm:dict:get",
    "body": [
      "get ${1:dict} ${2:key}$0",
    ],
    "description": "给定一个映射和一个键，从映射中获取值"
  },
  "HELM: set": {
    "prefix": "helm:dict:set",
    "body": [
      "set ${1:dict} ${2:keyN} ${3:valueN}$0",
    ],
    "description": "使用 set 给字典添加一个键值对"
  },
  "HELM: unset": {
    "prefix": "helm:dict:unset",
    "body": [
      "unset ${1:dict} ${2:key}$0",
    ],
    "description": "给定一个映射和 key ，从映射中删除这个 key"
  },
  "HELM: hasKey": {
    "prefix": "helm:dict:hasKey",
    "body": [
      "hasKey ${1:dict} ${2:key}$0",
    ],
    "description": "hasKey 函数会在给定字典中包含了给定 key 时返回 true"
  },
  "HELM: pluck": {
    "prefix": "helm:dict:pluck",
    "body": [
      "pluck ${1:key} ${2:dictN}$0",
    ],
    "description": "pluck 函数给定一个键和多个映射，并获得所有匹配项的列表"
  },
  "HELM: dig": {
    "prefix": "helm:dict:dig",
    "body": [
      "dig ${1:keyN} \"${2:defaultValue}\" ${3:dict}$0",
    ],
    "description": "dig 函数遍历嵌套的字典，从值列表中选择键。如果在关联的字典中找不到键，会返回默认值"
  },
  "HELM: merge": {
    "prefix": "helm:dict:merge",
    "body": [
      "merge ${1:destDict} ${2:dictN}$0",
    ],
    "description": "将两个或多个字典合并为一个， 目标字典优先。从左到右覆盖"
  },
  "HELM: mustMerge": {
    "prefix": "helm:dict:mustMerge",
    "body": [
      "mustMerge ${1:destDict} ${2:dictN}$0",
    ],
    "description": "将两个或多个字典合并为一个， 目标字典优先。从左到右覆盖"
  },
  "HELM: mergeOverwrite": {
    "prefix": "helm:dict:mergeOverwrite",
    "body": [
      "mergeOverwrite ${1:destDict} ${2:dictN}$0",
    ],
    "description": "合并两个或多个字典，优先按照 从右到左，在目标字典中有效地覆盖值。从右到左覆盖"
  },
  "HELM: mustMergeOverwrite": {
    "prefix": "helm:dict:mustMergeOverwrite",
    "body": [
      "mustMergeOverwrite ${1:destDict} ${2:dictN}$0",
    ],
    "description": "合并两个或多个字典，优先按照 从右到左，在目标字典中有效地覆盖值。从右到左覆盖"
  },
  "HELM: keys": {
    "prefix": "helm:dict:keys",
    "body": [
      "keys ${1:dictN}$0",
    ],
    "description": "keys 函数会返回一个或多个 dict 类型中所有的key 的 list。由于字典是 无序的， key 不会有可预料的顺序。 可以使用 sortAlpha 存储"
  },
  "HELM: pick": {
    "prefix": "helm:dict:pick",
    "body": [
      "pick ${1:dict} ${2:keyN}$0",
    ],
    "description": "pick 函数只从字典中选择给定的键，并创建一个新的 dict"
  },
  "HELM: omit": {
    "prefix": "helm:dict:omit",
    "body": [
      "omit ${1:dict} ${2:keyN}$0",
    ],
    "description": "omit 函数类似于 pick ，除它之外返回一个新的 dict ，所有的 key 不匹配给定的 key"
  },
  "HELM: values": {
    "prefix": "helm:dict:values",
    "body": [
      "values ${1:dict}$0",
    ],
    "description": "values 函数类似于 keys ，返回一个新的 list 包含源字典中所有的 value (只支持一个字典)"
  },
  "HELM: deepCopy": {
    "prefix": "helm:dict:deepCopy",
    "body": [
      "deepCopy ${1:dict}$0",
    ],
    "description": "deepCopy 和 mustDeepCopy 函数给定一个值并深度拷贝这个值。包括字典和其他结构体。 deepCopy 有问题时会出错， 而 mustDeepCopy 会返回一个错误给模板系统"
  },
  "HELM: mustDeepCopy": {
    "prefix": "helm:dict:mustDeepCopy",
    "body": [
      "mustDeepCopy ${1:dict}$0",
    ],
    "description": "deepCopy 和 mustDeepCopy 函数给定一个值并深度拷贝这个值。包括字典和其他结构体。 deepCopy 有问题时会出错， 而 mustDeepCopy 会返回一个错误给模板系统"
  },
  "HELM: b64enc": {
    "prefix": "helm:encode:b64enc",
    "body": [
      "b64enc$0",
    ],
    "description": "编码 Base64"
  },
  "HELM: b64dec": {
    "prefix": "helm:encode:b64dec",
    "body": [
      "b64dec$0",
    ],
    "description": "解码 Base64"
  },
  "HELM: b32enc": {
    "prefix": "helm:encode:b32enc",
    "body": [
      "b32enc$0",
    ],
    "description": "编码 Base32"
  },
  "HELM: b32dec": {
    "prefix": "helm:encode:b32dec",
    "body": [
      "b32dec$0",
    ],
    "description": "解码 Base32"
  },
  "HELM: list": {
    "prefix": "helm:list",
    "body": [
      "list ${1:valueN}$0",
    ],
    "description": "创建任意顺序的列表。类似于数组或切片，但列表是被设计用于不可变数据类型"
  },
  "HELM: first": {
    "prefix": "helm:list:first",
    "body": [
      "first ${1:list}$0",
    ],
    "description": "获取列表中的第一项，使用 first"
  },
  "HELM: mustFirst": {
    "prefix": "helm:list:mustFirst",
    "body": [
      "mustFirst ${1:list}$0",
    ],
    "description": "获取列表中的第一项，使用 first"
  },
  "HELM: rest": {
    "prefix": "helm:list:rest",
    "body": [
      "rest ${1:list}$0",
    ],
    "description": "获取列表的尾部内容 (除了第一项外的所有内容)，使用 rest"
  },
  "HELM: mustRest": {
    "prefix": "helm:list:mustRest",
    "body": [
      "mustRest ${1:list}$0",
    ],
    "description": "获取列表的尾部内容 (除了第一项外的所有内容)，使用 rest"
  },
  "HELM: last": {
    "prefix": "helm:list:last",
    "body": [
      "last ${1:list}$0",
    ],
    "description": "使用 last 获取列表的最后一项"
  },
  "HELM: mustLast": {
    "prefix": "helm:list:mustLast",
    "body": [
      "mustLast ${1:list}$0",
    ],
    "description": "使用 last 获取列表的最后一项"
  },
  "HELM: initial": {
    "prefix": "helm:list:initial",
    "body": [
      "initial ${1:list}$0",
    ],
    "description": "通过返回所有元素 但除了最后一个元素来赞赏 last"
  },
  "HELM: mustInitial": {
    "prefix": "helm:list:mustInitial",
    "body": [
      "mustInitial ${1:list}$0",
    ],
    "description": "通过返回所有元素 但除了最后一个元素来赞赏 last"
  },
  "HELM: append": {
    "prefix": "helm:list:append",
    "body": [
      "append ${1:list} ${2:value}$0",
    ],
    "description": "在已有列表中追加一项，创建一个新的列表"
  },
  "HELM: mustAppend": {
    "prefix": "helm:list:mustAppend",
    "body": [
      "mustAppend ${1:list} ${2:value}$0",
    ],
    "description": "在已有列表中追加一项，创建一个新的列表"
  },
  "HELM: prepend": {
    "prefix": "helm:list:prepend",
    "body": [
      "prepend ${1:list} ${2:value}$0",
    ],
    "description": "将元素添加到列表的前面，生成一个新的列表"
  },
  "HELM: mustPrepend": {
    "prefix": "helm:list:mustPrepend",
    "body": [
      "mustPrepend ${1:list} ${2:value}$0",
    ],
    "description": "将元素添加到列表的前面，生成一个新的列表"
  },
  "HELM: concat": {
    "prefix": "helm:list:concat",
    "body": [
      "concat ${1:listN}$0",
    ],
    "description": "将任意数量的列表串联成一个"
  },
  "HELM: reverse": {
    "prefix": "helm:list:reverse",
    "body": [
      "reverse ${1:list}$0",
    ],
    "description": "反转给定的列表生成一个新列表"
  },
  "HELM: mustReverse": {
    "prefix": "helm:list:mustReverse",
    "body": [
      "mustReverse ${1:list}$0",
    ],
    "description": "反转给定的列表生成一个新列表"
  },
  "HELM: uniq": {
    "prefix": "helm:list:uniq",
    "body": [
      "uniq ${1:list}$0",
    ],
    "description": "生成一个移除重复项的列表"
  },
  "HELM: mustUniq": {
    "prefix": "helm:list:mustUniq",
    "body": [
      "mustUniq ${1:list}$0",
    ],
    "description": "生成一个移除重复项的列表"
  },
  "HELM: without": {
    "prefix": "helm:list:without",
    "body": [
      "without ${1:list} ${2:valueN}$0",
    ],
    "description": "without 函数从列表中过滤内容"
  },
  "HELM: mustWithout": {
    "prefix": "helm:list:mustWithout",
    "body": [
      "mustWithout ${1:list} ${2:valueN}$0",
    ],
    "description": "mustWithout 函数从列表中过滤内容"
  },
  "HELM: has": {
    "prefix": "helm:list:has",
    "body": [
      "has ${1:value} ${2:list}$0",
    ],
    "description": "验证列表是否有特定元素"
  },
  "HELM: mustHas": {
    "prefix": "helm:list:mustHas",
    "body": [
      "mustHas ${1:value} ${2:list}$0",
    ],
    "description": "验证列表是否有特定元素"
  },
  "HELM: compact": {
    "prefix": "helm:list:compact",
    "body": [
      "compact ${1:list}$0",
    ],
    "description": "接收一个列表并删除空值项"
  },
  "HELM: mustCompact": {
    "prefix": "helm:list:mustCompact",
    "body": [
      "mustCompact ${1:list}$0",
    ],
    "description": "接收一个列表并删除空值项"
  },
  "HELM: index": {
    "prefix": "helm:list:index",
    "body": [
      "index ${1:list} ${2:indexN}$0",
    ],
    "description": "使用 index list [n] 获取列表的第 n 个元素。使用 index list [n] [m] ... 获取多位列表元素"
  },
  "HELM: slice": {
    "prefix": "helm:list:slice",
    "body": [
      "slice ${1:list} ${2:indexN}$0",
    ],
    "description": "从列表中获取部分元素，使用 slice list [n] [m]。等同于 list[n:m]"
  },
  "HELM: mustSlice": {
    "prefix": "helm:list:mustSlice",
    "body": [
      "mustSlice ${1:list} ${2:indexN}$0",
    ],
    "description": "从列表中获取部分元素，使用 slice list [n] [m]。等同于 list[n:m]"
  },
  "HELM: until": {
    "prefix": "helm:list:until",
    "body": [
      "until ${1:intMaxRange}$0",
    ],
    "description": "until 函数构建一个整数范围"
  },
  "HELM: untilStep": {
    "prefix": "helm:list:untilStep",
    "body": [
      "untilStep ${1:intStart} ${2:intEnd} ${3:intStep}$0",
    ],
    "description": "类似 until 与 untilStep 生成一个可计数的整型列表。但允许你定义开始，结束和步长"
  },
  "HELM: seq": {
    "prefix": "helm:list:seq",
    "body": [
      "seq $1$0",
    ],
    "description": "原理和 bash 的 seq 命令类似"
  },
  "HELM: mustUniq and mustCompact": {
    "prefix": "helm:list:uniqCompact",
    "body": [
      "$1 | mustUniq | mustCompact$0",
    ],
    "description": "列表去重、去空值"
  },
  "HELM: add": {
    "prefix": "helm:math:add",
    "body": [
      "add ${1:value} ${2:valueN}$0",
    ],
    "description": "求和。接受两个或多个输入"
  },
  "HELM: add1": {
    "prefix": "helm:math:add1",
    "body": [
      "add1 ${1:value}$0",
    ],
    "description": "自增加 1"
  },
  "HELM: sub": {
    "prefix": "helm:math:sub",
    "body": [
      "sub ${1:valueN}$0",
    ],
    "description": "相减"
  },
  "HELM: div": {
    "prefix": "helm:math:div",
    "body": [
      "div ${1:valueN}$0",
    ],
    "description": "整除"
  },
  "HELM: mod": {
    "prefix": "helm:math:mod",
    "body": [
      "mod ${1:valueN}$0",
    ],
    "description": "取模"
  },
  "HELM: mul": {
    "prefix": "helm:math:mul",
    "body": [
      "mul ${1:value} ${2:valueN}$0",
    ],
    "description": "相乘。接受两个或多个输入"
  },
  "HELM: max": {
    "prefix": "helm:math:max",
    "body": [
      "max ${1:valueN}$0",
    ],
    "description": "返回一组整数中最大的整数"
  },
  "HELM: min": {
    "prefix": "helm:math:min",
    "body": [
      "min ${1:valueN}$0",
    ],
    "description": "返回一组数中最小的数"
  },
  "HELM: len": {
    "prefix": "helm:math:len",
    "body": [
      "len $1$0",
    ],
    "description": "返回参数的长度"
  },
  "HELM: addf": {
    "prefix": "helm:math:addf",
    "body": [
      "addf ${1:valueN}$0",
    ],
    "description": "float64 格式: 求和。接受两个或多个输入"
  },
  "HELM: add1f": {
    "prefix": "helm:math:add1f",
    "body": [
      "add1f ${1:value}$0",
    ],
    "description": "float64 格式: 递增 1"
  },
  "HELM: subf": {
    "prefix": "helm:math:subf",
    "body": [
      "subf ${1:valueN}$0",
    ],
    "description": "float64 格式: 相减"
  },
  "HELM: divf": {
    "prefix": "helm:math:divf",
    "body": [
      "divf ${1:valueN}$0",
    ],
    "description": "float64 格式: 整除"
  },
  "HELM: mulf": {
    "prefix": "helm:math:mulf",
    "body": [
      "mulf ${1:value} ${2:valueN}$0",
    ],
    "description": "float64 格式: 乘法。接受两个或多个输入"
  },
  "HELM: maxf": {
    "prefix": "helm:math:maxf",
    "body": [
      "maxf ${1:valueN}$0",
    ],
    "description": "float64 格式: 返回最大浮点数"
  },
  "HELM: minf": {
    "prefix": "helm:math:minf",
    "body": [
      "minf ${1:valueN}$0",
    ],
    "description": "float64 格式: 返回最小浮点数"
  },
  "HELM: floor": {
    "prefix": "helm:math:floor",
    "body": [
      "floor ${1:value}$0",
    ],
    "description": "float64 格式: 返回小于等于输入值的最大浮点整数"
  },
  "HELM: ceil": {
    "prefix": "helm:math:ceil",
    "body": [
      "ceil ${1:value}$0",
    ],
    "description": "float64 格式: 返回大于等于输入值的最小浮点整数"
  },
  "HELM: round": {
    "prefix": "helm:math:round",
    "body": [
      "round ${1:value} ${2:digit}$0",
    ],
    "description": "float64 格式: 返回一个四舍五入到给定小数位的数"
  },
  // network
  "HELM: getHostByName": {
    "prefix": "helm:network:getHostByName",
    "body": [
      "getHostByName ${1:DN}$0",
    ],
    "description": "接收一个域名返回 IP 地址"
  },
  // file
  "HELM: base": {
    "prefix": "helm:file:base",
    "body": [
      "base ${1:path}$0",
    ],
    "description": "返回最后一个元素路径"
  },
  "HELM: dir": {
    "prefix": "helm:file:dir",
    "body": [
      "dir ${1:path}$0",
    ],
    "description": "返回目录，去掉路径的最后一部分。因此 dir \"foo/bar/baz\" 返回 foo/bar"
  },
  "HELM: clean": {
    "prefix": "helm:file:clean",
    "body": [
      "clean ${1:path}$0",
    ],
    "description": "清除路径。会清理 \"..\""
  },
  "HELM: ext": {
    "prefix": "helm:file:ext",
    "body": [
      "ext ${1:file}$0",
    ],
    "description": "返回文件扩展"
  },
  "HELM: isAbs": {
    "prefix": "helm:file:isAbs",
    "body": [
      "isAbs ${1:path}$0",
    ],
    "description": "检查文件路径是否为绝对路径"
  },
  "HELM: kindOf": {
    "prefix": "helm:reflection:kindOf",
    "body": [
      "kindOf ${1:key}$0",
    ],
    "description": "kindOf 返回对象类型"
  },
  "HELM: kindIs": {
    "prefix": "helm:reflection:kindIs",
    "body": [
      "kindIs \"${1:type}\" ${2:key}$0",
    ],
    "description": "kindIs 函数可以验证值是否为特定类型"
  },
  "HELM: typeOf": {
    "prefix": "helm:reflection:typeOf",
    "body": [
      "typeOf ${1:key}$0",
    ],
    "description": "返回值的基础类型"
  },
  "HELM: typeIs": {
    "prefix": "helm:reflection:typeIs",
    "body": [
      "typeIs \"${1:type}\" ${2:key}$0",
    ],
    "description": "类似 kindIs ，但针对 type: typeIs \"*io.Buffer\" $myVal"
  },
  "HELM: typeIsLike": {
    "prefix": "helm:reflection:typeIsLike",
    "body": [
      "typeIsLike \"${1:type}\" ${2:key}$0",
    ],
    "description": "类似 typeIs ，除非取消指针引用"
  },
  "HELM: deepEqual": {
    "prefix": "helm:reflection:deepEqual",
    "body": [
      "deepEqual ${1:key1} ${2:key2}$0",
    ],
    "description": "如果两个值相比是 \"deeply equal\", deepEqual 返回 true。也适用于非基本类型 (相较于内置的 eq)"
  },
  "HELM: semver": {
    "prefix": "helm:semantic:semver",
    "body": [
      "semver ${1:version}$0",
    ],
    "description": "semver 函数将字符串解析为语义版本"
  },
  "HELM: semver.Major": {
    "prefix": "helm:semantic:semver:Major",
    "body": [
      "Major$0",
    ],
    "description": "semver 解析后的主版本号。1.2.3-alpha.1+123 => 1"
  },
  "HELM: semver.Minor": {
    "prefix": "helm:semantic:semver:Minor",
    "body": [
      "Minor$0",
    ],
    "description": "semver 解析后的次版本号。1.2.3-alpha.1+123 => 2"
  },
  "HELM: semver.Patch": {
    "prefix": "helm:semantic:semver:Patch",
    "body": [
      "Patch$0",
    ],
    "description": "semver 解析后的补丁版本号。1.2.3-alpha.1+123 => 3"
  },
  "HELM: semver.Prerelease": {
    "prefix": "helm:semantic:semver:Prerelease",
    "body": [
      "Prerelease$0",
    ],
    "description": "semver 解析后的预发布版本号。1.2.3-alpha.1+123 => alpha.1"
  },
  "HELM: semver.Metadata": {
    "prefix": "helm:semantic:semver:Metadata",
    "body": [
      "Metadata$0",
    ],
    "description": "semver 解析后的构建元数据。1.2.3-alpha.1+123 => 123"
  },
  "HELM: semver.Original": {
    "prefix": "helm:semantic:semver:Original",
    "body": [
      "Original$0",
    ],
    "description": "semver 原始版本字符串"
  },
  "HELM: semverCompare": {
    "prefix": "helm:semantic:semverCompare",
    "body": [
      "semverCompare ${1:versionN}$0",
    ],
    "description": "一个更健壮的比较函数"
  },
  "HELM: Compare": {
    "prefix": "helm:semantic:Compare",
    "body": [
      "Compare$0",
    ],
    "description": "Compare函数比较一个 Version 和另一个 Version"
  },
  "HELM: urlParse": {
    "prefix": "helm:url:urlParse",
    "body": [
      "urlParse ${1:url}$0",
    ],
    "description": "解析 URL 的字符串并生成包含 URL 部分的字典"
  },
  "HELM: urlJoin": {
    "prefix": "helm:url:urlJoin",
    "body": [
      "urlJoin ${1:dict}$0",
    ],
    "description": "将一个映射 (由 urlParse 生成的) 连接成 URL 字符串"
  },
  "HELM: urlquery": {
    "prefix": "helm:url:urlquery",
    "body": [
      "urlquery ${1:stringForQuery}$0",
    ],
    "description": "返回作为参数传入的值的转义版本，这样就可以嵌入到 URL 的查询部分"
  },
  "HELM: uuidv4": {
    "prefix": "helm:uuid:uuidv4",
    "body": [
      "uuidv4$0",
    ],
    "description": "可以生成UUID v4 通用唯一ID"
  },
  "HELM: lookup": {
    "prefix": "helm:lookup",
    "body": [
      "lookup \"${1:apiVersion}\" \"${2:kind}\" \"${3:namespace}\" \"${4:name}\"$0",
    ],
    "description": "用于在正在运行的集群中查找资源。当和 helm template 命令一起使用时会返回一个空响应"
  },
  // 流控制
  "HELM: include": {
    "prefix": "helm:include",
    "body": [
      "include \"$1\"$0",
    ],
    "description": "include \"template\""
  },
  "HELM: tempalte": {
    "prefix": "helm:tempalte",
    "body": [
      "tempalte \"$1\"$0",
    ],
    "description": "template \"template\""
  },
  "HELM: range dict": {
    "prefix": "helm:range:dict",
    "body": [
      "range ${2:key} := ${1:value}$0",
    ],
    "description": "range $k, $v := dict"
  },
  "HELM: range list or slice": {
    "prefix": "helm:range:list:slice",
    "body": [
      "range ${1:value}$0",
    ],
    "description": "range list"
  },
  "HELM: with": {
    "prefix": "helm:with",
    "body": [
      "with ${1:value}$0",
    ],
    "description": "with ."
  },
  // others
  "HELM: clean:d": {
    "prefix": "helm:dollar:clean",
    "body": [
      "\\$__clean$0",
    ],
    "description": "定义: $__clean"
  },
  "HELM: var:d": {
    "prefix": "helm:dollar:var",
    "body": [
      "\\$__$0",
    ],
    "description": "定义: $__<key>"
  }
}
